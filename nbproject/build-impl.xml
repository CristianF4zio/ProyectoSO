<?xml version="1.0" encoding="UTF-8"?>
<!--
*** GENERATED FROM project.xml - DO NOT EDIT  ***
***         EDIT ../build.xml INSTEAD         ***
-->
<project name="ProyectoSO1-impl" default="default" basedir="..">
    <fail message="Please build using Ant 1.8.0 or higher.">
        <condition>
            <not>
                <antversion atleast="1.8.0"/>
            </not>
        </condition>
    </fail>
    <target name="default" depends="test,jar,javadoc"/>
    <target name="pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="init-private" depends="pre-init">
        <property file="nbproject/private/private.properties"/>
    </target>
    <target name="init-user" depends="init-private">
        <property file="${user.properties.file}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="21"/>
        <property name="default.javac.target" value="21"/>
    </target>
    <target name="init-project" depends="init-user">
        <property file="nbproject/project.properties"/>
    </target>
    <target name="do-init" depends="init-project">
        <available file="${manifest.file}" property="manifest.available"/>
        <condition property="splashscreen.available">
            <and>
                <not>
                    <equals arg1="${application.splash}" arg2="" trim="true"/>
                </not>
                <available file="${application.splash}"/>
            </and>
        </condition>
        <condition property="main.class.available">
            <and>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="profile.available">
            <and>
                <isset property="javac.profile"/>
                <length string="${javac.profile}" when="greater" length="0"/>
                <matches pattern="1\.[89](\..*)?" string="${javac.source}"/>
            </and>
        </condition>
        <condition property="do.archive">
                <not>
                    <istrue value="${jar.archive.disabled}"/>
                </not>
        </condition>
        <condition property="do.mkdist">
            <and>
                <isset property="do.archive"/>
                <isset property="libs.CopyLibs.classpath"/>
                <not>
                    <istrue value="${mkdist.disabled}"/>
                </not>
            </and>
        </condition>
        <condition property="do.archive+package.without.custom">
            <and>
                <isset property="do.archive"/>
                <isset property="libs.CopyLibs.classpath"/>
                <not>
                    <istrue value="${mkdist.disabled}"/>
                </not>
            </and>
        </condition>
        <condition property="do.archive+package.custom">
            <and>
                <isset property="do.archive"/>
                <isset property="libs.CopyLibs.classpath"/>
                <not>
                    <istrue value="${mkdist.disabled}"/>
                </not>
                <isset property="custom.manifest.file"/>
            </and>
        </condition>
        <condition property="do.archive+package.without.custom.without.manifest">
            <and>
                <isset property="do.archive"/>
                <isset property="libs.CopyLibs.classpath"/>
                <not>
                    <istrue value="${mkdist.disabled}"/>
                </not>
                <not>
                    <isset property="custom.manifest.file"/>
                </not>
            </and>
        </condition>
        <condition property="do.archive+package.without.custom.with.manifest">
            <and>
                <isset property="do.archive"/>
                <isset property="libs.CopyLibs.classpath"/>
                <not>
                    <istrue value="${mkdist.disabled}"/>
                </not>
                <not>
                    <isset property="custom.manifest.file"/>
                </not>
                <isset property="manifest.available"/>
            </and>
        </condition>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <and>
                <isset property="javadoc.preview"/>
                <isfalse value="${javadoc.preview}"/>
            </and>
        </condition>
        <property name="run.jvmargs" value=""/>
        <property name="run.jvmargs.ide" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <condition property="no.deps">
            <and>
                <isset property="no.dependencies"/>
            </and>
        </condition>
        <property name="javac.debug" value="true"/>
        <property name="javadoc.preview" value="true"/>
        <property name="application.args" value=""/>
        <property name="source.encoding" value="${file.encoding}"/>
        <property name="runtime.encoding" value="${source.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <property name="do.depend" value="false"/>
        <condition property="do.depend.true">
            <istrue value="${do.depend}"/>
        </condition>
        <path id="endorsed.classpath.path" path="${endorsed.classpath}"/>
        <condition else="" property="endorsed.classpath.cmd.line.arg" value="-Xbootclasspath/p:'${toString:endorsed.classpath.path}'">
            <and>
                <isset property="endorsed.classpath"/>
                <not>
                    <equals arg1="${endorsed.classpath}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition else="" property="javac.profile.cmd.line.arg" value="-profile ${javac.profile}">
            <isset property="profile.available"/>
        </condition>
        <condition else="false" property="jdkBug6558476">
            <and>
                <matches pattern="1\.[56]" string="${java.specification.version}"/>
                <not>
                    <os family="unix"/>
                </not>
            </and>
        </condition>
        <property name="javac.fork" value="${jdkBug6558476}"/>
        <property name="jar.index" value="false"/>
        <property name="jar.index.metainf" value="${jar.index}"/>
        <available file="${meta.inf.dir}/persistence.xml" property="has.persistence.xml"/>
        <condition property="junit.available">
            <or>
                <available classname="org.junit.Test" classpath="${run.test.classpath}"/>
            </or>
        </condition>
        <condition property="testng.available">
            <or>
            <available classname="org.testng.annotations.Test" classpath="${run.test.classpath}"/>
            </or>
        </condition>
        <condition property="junit+testng.available">
            <and>
                <isset property="junit.available"/>
                <isset property="testng.available"/>
            </and>
        </condition>
    </target>
    <target name="post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="init-check" depends="pre-init,init-private,init-user,init-project,do-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="init" depends="init-check,post-init"/>
    <target name="deps-jar" depends="init" unless="no.deps"/>
    <target name="pre-pre-compile" depends="init,deps-jar">
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="pre-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile" depends="init,deps-jar,pre-pre-compile,pre-compile" description="Compile project.">
        <javac debug="${javac.debug}" deprecation="${javac.deprecation}" destdir="${build.classes.dir}" encoding="${source.encoding}" excludes="${excludes}" fork="${javac.fork}" includeantruntime="false" includes="${includes}" source="${javac.source}" srcdir="${src.dir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
            <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.profile.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <classpath>
                <path path="${javac.classpath}"/>
                    </classpath>
        </javac>
    </target>
    <target name="post-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-single" depends="init,deps-jar,pre-pre-compile,pre-compile">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <javac debug="${javac.debug}" deprecation="${javac.deprecation}" destdir="${build.classes.dir}" encoding="${source.encoding}" excludes="${excludes}" fork="${javac.fork}" includeantruntime="false" includes="${javac.includes}" source="${javac.source}" srcdir="${src.dir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.profile.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <classpath>
                <path path="${javac.classpath}"/>
                    </classpath>
        </javac>
    </target>
    <target name="pre-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-single" depends="init,deps-jar,pre-pre-compile,pre-compile-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <javac debug="${javac.debug}" deprecation="${javac.deprecation}" destdir="${build.classes.dir}" encoding="${source.encoding}" excludes="${excludes}" fork="${javac.fork}" includeantruntime="false" includes="${javac.includes}" source="${javac.source}" srcdir="${src.dir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.profile.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <classpath>
                <path path="${javac.classpath}"/>
                    </classpath>
        </javac>
    </target>
    <target name="post-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="pre-dist" depends="init" if="do.archive">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.jars.dir}"/>
    </target>
    <target name="dist" depends="init,compile,post-compile,test,post-dist" description="Build distribution (JAR)." if="do.archive">
        <jar compress="${jar.compress}" index="${jar.index.metainf}" jarfile="${dist.jar}" manifest="${manifest.file}">
            <fileset dir="${build.classes.dir}" excludes="${dist.archive.excludes}"/>
        </jar>
    </target>
    <target name="post-dist">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="javadoc" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${application.title}">
                    <classpath>
                <path path="${javac.classpath}"/>
                    </classpath>
            <fileset dir="${src.dir}" excludes="*.java,${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
                            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/*.java"/>
                <exclude name="*.java"/>
                            </fileset>
        </javadoc>
        <copy todir="${dist.javadoc.dir}">
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/doc-files/**"/>
                    </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/doc-files/**"/>
            </fileset>
        </copy>
    </target>
    <target name="test" depends="init,compile,post-compile" if="have.tests" description="Run unit tests.">
        <mkdir dir="${build.test.classes.dir}"/>
        <javac debug="${javac.debug}" deprecation="${javac.deprecation}" destdir="${build.test.classes.dir}" encoding="${source.encoding}" excludes="${excludes}" fork="${javac.fork}" includeantruntime="false" includes="${includes}" source="${javac.source}" srcdir="${test.src.dir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
            <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
            <compilerarg line="${javac.profile.cmd.line.arg}"/>
            <compilerarg line="${javac.compilerargs}"/>
                    <classpath>
                <path path="${javac.classpath}"/>
                <path path="${build.classes.dir}"/>
                    </classpath>
        </javac>
    </target>
    <target name="run" depends="init,compile,post-compile" description="Run a main class.">
        <java classname="${main.class}" dir="${work.dir}" failonerror="${java.failonerror}" fork="true">
            <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                        <jvmarg line="${run.jvmargs}"/>
                        <jvmarg line="${run.jvmargs.ide}"/>
                    <arg line="${application.args}"/>
                    <classpath>
                        <path path="${run.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                </java>
    </target>
    <target name="run-single" depends="init,compile,post-compile" description="Run a single class.">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <java classname="${run.class}" dir="${work.dir}" failonerror="${java.failonerror}" fork="true">
            <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <jvmarg line="${run.jvmargs.ide}"/>
                    <classpath>
                <path path="${run.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                </java>
    </target>
    <target name="run-applet" depends="init,compile,post-compile" description="Run an applet.">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <java classname="sun.applet.AppletViewer" dir="${work.dir}" failonerror="true" fork="true">
                    <jvmarg line="${run.jvmargs}"/>
                    <jvmarg line="${run.jvmargs.ide}"/>
            <arg value="${applet.url}"/>
                    <classpath>
                <path path="${run.classpath}"/>
                    </classpath>
                </java>
    </target>
    <target name="run-webstart" depends="init,compile,post-compile" description="Run a JNLP application.">
        <fail unless="jnlp.url">Must select one file in the IDE or set jnlp.url</fail>
        <java classname="sun.javaws.Main" dir="${work.dir}" failonerror="true" fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <jvmarg line="${run.jvmargs.ide}"/>
            <arg value="${jnlp.url}"/>
            <classpath>
                <path path="${run.classpath}"/>
            </classpath>
        </java>
    </target>
    <target name="clean" depends="init" description="Clean build products.">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    <target name="jar" depends="init,compile,post-compile,test" if="do.archive" description="Build JAR.">
        <jar compress="${jar.compress}" index="${jar.index.metainf}" jarfile="${dist.jar}" manifest="${manifest.file}">
            <fileset dir="${build.classes.dir}" excludes="${dist.archive.excludes}"/>
        </jar>
    </target>
</project>
